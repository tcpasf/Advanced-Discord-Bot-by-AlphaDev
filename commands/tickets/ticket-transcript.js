const { SlashCommandBuilder, PermissionFlagsBits, AttachmentBuilder, EmbedBuilder } = require('discord.js');
const { createSuccessEmbed, createErrorEmbed } = require('../../utils/embeds');
const { tickets } = require('../../utils/database');
const fs = require('fs');
const path = require('path');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ticket-transcript')
        .setDescription('Generate a transcript of the current ticket')
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),
    
    async execute(interaction) {
        try {
            // Check if the channel is a ticket
            const channelName = interaction.channel.name;
            
            if (!channelName.startsWith('ticket-')) {
                return interaction.reply({ 
                    embeds: [createErrorEmbed('Not a Ticket', 'This command can only be used in ticket channels.')],
                    ephemeral: true
                });
            }
            
            // Get ticket ID from channel name
            const ticketId = channelName.split('-')[1];
            
            // Get ticket data
            const ticketData = tickets.getTicket(ticketId);
            
            if (!ticketData) {
                return interaction.reply({ 
                    embeds: [createErrorEmbed('Invalid Ticket', 'This ticket does not exist in the database.')],
                    ephemeral: true
                });
            }
            
            await interaction.deferReply();
            
            // Generate transcript
            const transcript = await generateTranscript(interaction.channel, ticketId);
            
            // Send transcript
            const embed = createSuccessEmbed(
                'Ticket Transcript',
                `Transcript for ticket #${ticketId} has been generated.`
            )
            .addFields(
                { name: 'Ticket ID', value: `#${ticketId}`, inline: true },
                { name: 'Generated By', value: `${interaction.user.tag}`, inline: true },
                { name: 'Generated At', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
            );
            
            await interaction.editReply({ 
                embeds: [embed],
                files: [transcript]
            });
            
            // Log the transcript
            const guildSettings = tickets.getSettings(interaction.guild.id);
            
            if (guildSettings.logChannel) {
                const logChannel = interaction.guild.channels.cache.get(guildSettings.logChannel);
                
                if (logChannel) {
                    const logEmbed = new EmbedBuilder()
                        .setColor('#00FFFF')
                        .setTitle('Ticket Transcript Generated')
                        .addFields(
                            { name: 'Ticket ID', value: `#${ticketId}`, inline: true },
                            { name: 'Channel', value: `${interaction.channel} (${interaction.channel.id})`, inline: true },
                            { name: 'Generated By', value: `${interaction.user} (${interaction.user.tag})`, inline: true },
                            { name: 'User', value: `<@${ticketData.userId}> (${ticketData.userId})`, inline: true }
                        )
                        .setFooter({ text: `Staff ID: ${interaction.user.id}` })
                        .setTimestamp();
                    
                    await logChannel.send({ 
                        embeds: [logEmbed],
                        files: [transcript]
                    });
                }
            }
        } catch (error) {
            console.error('Error generating transcript:', error);
            
            if (interaction.deferred) {
                await interaction.editReply({ 
                    embeds: [createErrorEmbed('Error', 'An error occurred while generating the transcript.')]
                });
            } else {
                await interaction.reply({ 
                    embeds: [createErrorEmbed('Error', 'An error occurred while generating the transcript.')],
                    ephemeral: true
                });
            }
        }
    },
    
    async handleButton(interaction) {
        if (!interaction.customId.startsWith('ticket_transcript_')) {
            return;
        }
        
        try {
            // Get ticket ID from button custom ID
            const ticketId = interaction.customId.split('_')[2];
            
            // Get ticket data
            const ticketData = tickets.getTicket(ticketId);
            
            if (!ticketData) {
                return interaction.reply({ 
                    embeds: [createErrorEmbed('Invalid Ticket', 'This ticket does not exist in the database.')],
                    ephemeral: true
                });
            }
            
            await interaction.deferReply();
            
            // Generate transcript
            const transcript = await generateTranscript(interaction.channel, ticketId);
            
            // Send transcript
            const embed = createSuccessEmbed(
                'Ticket Transcript',
                `Transcript for ticket #${ticketId} has been generated.`
            )
            .addFields(
                { name: 'Ticket ID', value: `#${ticketId}`, inline: true },
                { name: 'Generated By', value: `${interaction.user.tag}`, inline: true },
                { name: 'Generated At', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
            );
            
            await interaction.editReply({ 
                embeds: [embed],
                files: [transcript]
            });
            
            // Log the transcript
            const guildSettings = tickets.getSettings(interaction.guild.id);
            
            if (guildSettings.logChannel) {
                const logChannel = interaction.guild.channels.cache.get(guildSettings.logChannel);
                
                if (logChannel) {
                    const logEmbed = new EmbedBuilder()
                        .setColor('#00FFFF')
                        .setTitle('Ticket Transcript Generated')
                        .addFields(
                            { name: 'Ticket ID', value: `#${ticketId}`, inline: true },
                            { name: 'Channel', value: `${interaction.channel} (${interaction.channel.id})`, inline: true },
                            { name: 'Generated By', value: `${interaction.user} (${interaction.user.tag})`, inline: true },
                            { name: 'User', value: `<@${ticketData.userId}> (${ticketData.userId})`, inline: true }
                        )
                        .setFooter({ text: `Staff ID: ${interaction.user.id}` })
                        .setTimestamp();
                    
                    await logChannel.send({ 
                        embeds: [logEmbed],
                        files: [transcript]
                    });
                }
            }
        } catch (error) {
            console.error('Error generating transcript:', error);
            
            if (interaction.deferred) {
                await interaction.editReply({ 
                    embeds: [createErrorEmbed('Error', 'An error occurred while generating the transcript.')]
                });
            } else {
                await interaction.reply({ 
                    embeds: [createErrorEmbed('Error', 'An error occurred while generating the transcript.')],
                    ephemeral: true
                });
            }
        }
    }
};

async function generateTranscript(channel, ticketId) {
    // Create transcripts directory if it doesn't exist
    const transcriptsDir = path.join(__dirname, '..', '..', 'data', 'transcripts');
    if (!fs.existsSync(transcriptsDir)) {
        fs.mkdirSync(transcriptsDir, { recursive: true });
    }
    
    // Fetch messages
    let allMessages = [];
    let lastId;
    
    while (true) {
        const options = { limit: 100 };
        if (lastId) {
            options.before = lastId;
        }
        
        const messages = await channel.messages.fetch(options);
        if (messages.size === 0) break;
        
        allMessages = [...allMessages, ...messages.values()];
        lastId = messages.last().id;
        
        if (messages.size < 100) break;
    }
    
    // Sort messages by timestamp (oldest first)
    allMessages.sort((a, b) => a.createdTimestamp - b.createdTimestamp);
    
    // Generate HTML transcript
    let html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ticket #${ticketId} Transcript</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
            background-color: #f9f9f9;
        }
        .container {
            max-width: 900px;
            margin: 0 auto;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        .header h1 {
            color: #5865F2;
            margin-bottom: 10px;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 5px;
            background-color: #f5f5f5;
        }
        .message-header {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        .username {
            font-weight: bold;
            color: #5865F2;
        }
        .timestamp {
            margin-left: 10px;
            color: #999;
            font-size: 0.8em;
        }
        .content {
            margin-left: 50px;
        }
        .embed {
            margin-top: 10px;
            margin-left: 50px;
            padding: 10px;
            border-left: 4px solid #5865F2;
            background-color: #f0f0f0;
            border-radius: 0 5px 5px 0;
        }
        .embed-title {
            font-weight: bold;
            color: #5865F2;
        }
        .embed-description {
            margin-top: 5px;
        }
        .embed-field {
            margin-top: 10px;
        }
        .embed-field-name {
            font-weight: bold;
        }
        .attachment {
            margin-top: 10px;
            margin-left: 50px;
        }
        .attachment a {
            color: #5865F2;
            text-decoration: none;
        }
        .attachment a:hover {
            text-decoration: underline;
        }
        .footer {
            margin-top: 30px;
            text-align: center;
            color: #999;
            font-size: 0.8em;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Ticket #${ticketId} Transcript</h1>
            <p>Channel: ${channel.name} (${channel.id})</p>
            <p>Generated: ${new Date().toLocaleString()}</p>
        </div>`;
    
    // Add messages to transcript
    for (const message of allMessages) {
        const timestamp = new Date(message.createdTimestamp).toLocaleString();
        const avatarURL = message.author.displayAvatarURL({ extension: 'png', size: 128 });
        
        html += `
        <div class="message">
            <div class="message-header">
                <img src="${avatarURL}" alt="Avatar" class="avatar">
                <div class="username">${message.author.tag}</div>
                <div class="timestamp">${timestamp}</div>
            </div>
            <div class="content">${message.content || ''}</div>`;
        
        // Add embeds
        if (message.embeds.length > 0) {
            for (const embed of message.embeds) {
                html += `
            <div class="embed">`;
                
                if (embed.title) {
                    html += `
                <div class="embed-title">${embed.title}</div>`;
                }
                
                if (embed.description) {
                    html += `
                <div class="embed-description">${embed.description}</div>`;
                }
                
                if (embed.fields && embed.fields.length > 0) {
                    for (const field of embed.fields) {
                        html += `
                <div class="embed-field">
                    <div class="embed-field-name">${field.name}</div>
                    <div class="embed-field-value">${field.value}</div>
                </div>`;
                    }
                }
                
                html += `
            </div>`;
            }
        }
        
        // Add attachments
        if (message.attachments.size > 0) {
            for (const [id, attachment] of message.attachments) {
                html += `
            <div class="attachment">
                <a href="${attachment.url}" target="_blank">${attachment.name}</a>
            </div>`;
            }
        }
        
        html += `
        </div>`;
    }
    
    html += `
        <div class="footer">
            <p>End of transcript</p>
        </div>
    </div>
</body>
</html>`;
    
    // Save transcript to file
    const fileName = `ticket-${ticketId}-${Date.now()}.html`;
    const filePath = path.join(transcriptsDir, fileName);
    fs.writeFileSync(filePath, html);
    
    // Create attachment
    const attachment = new AttachmentBuilder(filePath, { name: fileName });
    
    return attachment;
}